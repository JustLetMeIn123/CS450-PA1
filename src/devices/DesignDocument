
 

                      +------------------------+
                      |          CS 450        |
                      | PROJECT 1: ALARM CLOCK |
                      |     DESIGN DOCUMENT    |
                      +------------------------+
                                  
---- GROUP 2----
 
>> Fill in the names and email addresses of your group members.
 
John Cronin <croninja@dukes.jmu.edu>
Justin Park <park3jw@dukes.jmu.edu>
Jackson Brantley <brantlja@dukes.jmu.edu>
 
---- PRELIMINARIES ----
 
>> If you have any preliminary comments on your submission or notes for 
>> me, please give them here.
 
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
 
                            ALARM CLOCK
                            ===========
 
---- DATA STRUCTURES ----
 
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

* struct list not_ready_list; in timer.h to create a list to push the sleeping threads into.
* struct thread *curr = thread_current(); in timer.c timer_sleep, the currently active thread we want to use to be slept. 
* int64_t wait_time; in thread.h, field to set when the thread needs to be woken up.
* struct list_elem *e = list_front(&not_ready_list); a list_elem that points to the head of the not_ready_list for iteration.
* struct thread *f = list_entry (e, struct thread, elem2); used to represent our current entry that will be used to evaluate
  if its wait time has the correct amount of ticks to be unblocked.


---- ALGORITHMS ----
 
>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
* When timer_sleep() is called, we disable interupts to ensure outside calls to the not_ready_list are not being made. During
the time interupts are disabled, we get the current thread, set the wait_time field to when the thread should be woken up again,
sleep the thread (block it), add the thread to the not_ready_list, and then enable interupts again. In thread_tick() we then
loop through the threads that are ready to be woken up and wake them up (unblock them).
 
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
* We insert slept threads into the not_ready_list based on how early they can be woken up. We then only loop through the threads
in the not_ready_list that are ready to be woken up.
 
---- SYNCHRONIZATION ----
 
>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
* Disabling the interrupts will allow race conditions to be avoided when it is called simultaneously.
 
>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
* We disable interupts in timer_sleep().
 
---- RATIONALE ----
 
>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
* Blocking the current thread and keeping it in a list was the only feasible way we could think of. We decided to unblock 
it in thread_tick() of thread.c because we need to check the list of threads that need to be woken up after each tick.
We couldn't come to an agreement about another design that would work so we chose this one because we believed it was
the most efficient and cleanest approach.